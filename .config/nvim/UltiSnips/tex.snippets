global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal


#┌─────────────────┐
#│ Document Layout │
#└─────────────────┘

# Template
snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[dutch]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet

# Use package
snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

# Begin
snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

# Three dots
priority 100
snippet ... "ldots" iA
\ldots
endsnippet

# Tables
snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet


#┌───────────────────────────┐
#│ Mathematical environments │
#└───────────────────────────┘

# Figure environment
snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

# Enumerate
snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

# Itemize
snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

# Description
snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

# Implies
snippet => "implies" Ai
\implies
endsnippet

# Implied by
snippet =< "implied by" Ai
\impliedby
endsnippet

# iff
context "math()"
snippet iff "iff" Ai
\iff
endsnippet

# Inline math
snippet mk "Inline Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# Displayed math
snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

# Align environment
snippet ali "Align" bA
\begin{align*}
	$1
.\end{align*}
endsnippet


#┌───────────┐
#│ Fractions │
#└───────────┘

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# VISUAL mode -> select text -> <TAB> -> type / -> <TAB>
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet


#┌────────────────┐
#│ Auto subscript │
#└────────────────┘

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


#┌───────────────────────────────────────────────┐
#│ Evaluate mathematical expressions using sympy │
#└───────────────────────────────────────────────┘

snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet


#┌─────────────────────────────────────────────────────┐
#│ Evaluate mathematical expressions using mathematica │
#└─────────────────────────────────────────────────────┘

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet


#┌───────────────┐
#│ Miscellaneous │
#└───────────────┘

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "not equal" iA
\neq 
endsnippet

# Overline
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

